<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	     xmlns:aop="http://www.springframework.org/schema/aop"
	     xmlns:tx="http://www.springframework.org/schema/tx"
	     xmlns:context="http://www.springframework.org/schema/context"
	     xsi:schemaLocation="http://www.springframework.org/schema/beans
	       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
           http://www.springframework.org/schema/tx
           http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.0.xsd">
	
	<bean id="bird" class="bimingliang.aop.Bird"></bean>
	<bean id="car" class="bimingliang.aop.Car"></bean>
	<bean id="forExtend" class="bimingliang.aop.ForExtendImplement"></bean>
	
	<bean id="biMingliang" class="bimingliang.aop.BiMingliang"></bean>
	<bean id="extendImplement" class="bimingliang.aop.ExtendImplement"></bean>
	<bean id="baseImplement" class="bimingliang.aop.BaseImplement"></bean>
	<aop:config>
		<aop:aspect ref="biMingliang">
			<!-- bimingliang.aop.Car.start(..) 方法执行之前调用biMingliang的up()方法。
			aop:before 表示目标执行之前执行
			execution(* bimingliang.aop.Car.start(..)) 中 * 表示返回类型为任意类型。
			bimingliang.aop.Car.start指定在哪种类的哪个方法之前调用
			(..)指定方法参数为任意
			method="up"指定目标调用前调用的方法
			-->
			<aop:before pointcut="execution(* bimingliang.aop.Car.start(..))" method="up"/>
			<!-- fly(..)方法执行之后调用biMingliang的getWorking方法。 -->
			<aop:after pointcut="execution(* bimingliang.aop.Bird.fly(..))" method="work"/>
			<!-- fly(..)方法在biMingliang的watch方法中执行。这种环绕方式一般用于执行前后涉及数据交互，比如计算方法执行时间，需要起始和结束时间 -->
			<aop:around pointcut="execution(* bimingliang.aop.Bird.fly(..))" method="watch"/>
			<!-- fly(..)方法抛出异常之后调用biMingliang的sleep方法。 -->
			<aop:after-throwing pointcut="execution(* bimingliang.aop.Bird.fly(..))" method="sleep"/>
			<!-- pointcut 的配置：
			a) pointcut="execution(* bimingliang.aop.Bird.fly(..)) and within(bimingliang.aop.*)"
			within(bimingliang.aop.*) 表示限定在 bimingliang.aop 包下的任意类的任意方法应用该切点
			and 表示要同时满足 execution(* bimingliang.aop.Bird.fly(..)) 和 within(bimingliang.aop.*)
			类似的还有 or/not（也可以用 && || ! 注意在 xml 中 & 是需要转意的）
			b) pointcut="execution(* bimingliang.aop.Bird.fly(..)) and bean(bird)"
			bean(bird) 表示对指定 id 的 bean 应用该切点。切记没有 execution(* bimingliang.aop.Bird.fly(..)) and !bean(bird)
			在这种情况下，该切点会被织入到 id 不是 bird 的所有 bean 中
			-->
		</aop:aspect>
	</aop:config>
	
	<aop:config>
	    <!-- aop:pointcut 可以定义一个在 aop:config 中，那么这个 aop:pointcut 在当前 aop:config 中可以被各个切面通用 -->
	    <!-- aop:pointcut 也可以定义一个在 aop:aspect 中，那么这个 aop:pointcut 只能在其定义的 aop:aspect 中使用 -->
		<!-- 定义一个在 aop:config 中通用的切点，其中 and args(length) 指定参数 -->
		<aop:pointcut id="biMingiangParameter" expression="execution(* bimingliang.aop.Car.run(String)) and args(length)" />
		<aop:aspect ref="biMingliang">
			<!-- pointcut-ref="biMingiangParameter"指向切点，arg-names="length"引用参数 -->
			<aop:before pointcut-ref="biMingiangParameter" method="watchLength" arg-names="length"/>
		</aop:aspect>
	</aop:config>
	
	<aop:config>
		<aop:aspect>
			<!-- 表示所有实现了 bimingliang.aop.Base 接口的对象都实现了 bimingliang.aop.Extend 接口，具体实现方法由 extendImplement 提供 -->
			<aop:declare-parents types-matching="bimingliang.aop.Base+" implement-interface="bimingliang.aop.Extend" 
			delegate-ref="extendImplement"/>
		</aop:aspect>
	</aop:config>
	
	<!-- 使用 aop:aspectj-autoproxy 后 @Aspect 注解的切面会被自动织入 -->
	<aop:aspectj-autoproxy />
	<bean id="biMingjie" class="bimingliang.aop.BiMingjie"></bean>
	<bean id="declareAspect" class="bimingliang.aop.DeclareAspect"></bean>
</beans>
